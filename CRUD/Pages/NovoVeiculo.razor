@page "/novoveiculo"
@inject VeiculoService service
@inject StateContainer stateContainer
@inject IJSRuntime JS
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager

<div class="container">
    <h3 class="text-center">Novo Veiculo</h3>
    <div class="form ml-2">
        <EditForm Model="@veiculo">
            <div class="row">
                <div class="form-group col-5">
                    <label for="placa">Placa</label>
                    <input type="text" id="placa" required class="form-control" @bind-value="@veiculo.Placa" />
                </div>
                <div class="form-group col-5">
                    <label for="modelo">Modelo</label>
                    <input type="text" id="modelo" required class="form-control" @bind-value="@veiculo.Modelo" />
                </div>
            </div>

            <div class="row">
                <div class="form-group col-5">
                    <label for="chassi"> Chassi</label>
                    <input type="text" id="chassi" class="form-control" @bind-value="@veiculo.Chassi" />
                </div>
                <div class="form-group col-5">
                    <label for="cor">Cor</label>
                    <input type="text" id="cor" required class="form-control" @bind-value="@veiculo.Cor" />
                </div>
            </div>

            <div class="row">
                <div class="form-group col-5">
                    <label for="ano">Ano de fabricação</label>
                    <input type="text" id="ano" required class="form-control" @bind-value="@veiculo.Ano_fabricacao" />
                </div>

            </div>
            <div class="text-center p-3 mb-3">
                <button class="btn btn-success" @onclick="AdicionarVeiculo">Salvar</button>
            </div>
        </EditForm>

    </div>
    <div class="text-center text-info">
        <h4>@mensagem</h4>
    </div>
</div>

@code {


    public Veiculo veiculo { get; set; } = new();
    public string mensagem = "";
    private async Task AdicionarVeiculo()
    {
        if ((veiculo.Placa == null || veiculo.Chassi == ""))
        {
            mensagem = "Placa e chassi não pode ser vazio";
            return;
        }

        if (stateContainer.veiculo is null)
        {
            await service.AddVeiculoAsync(veiculo);
            await JS.InvokeVoidAsync("alert", "Veículo " + veiculo.Placa + " Adicionado com Sucesso");
            NavigationManager.NavigateTo("/veiculos");
        }
        else
        {
            await service.UpdateVeiculoAsync(veiculo);
            await JS.InvokeVoidAsync("alert", "Veículo " + veiculo.Placa + " Atualizado com Sucesso");

            NavigationManager.NavigateTo("/veiculos");
            stateContainer.veiculo = null;
        }
        veiculo = new();
    }

    protected override void OnInitialized()
    {
        if (stateContainer.veiculo is not null)
        {
            veiculo = stateContainer.veiculo;
        }
    }
}

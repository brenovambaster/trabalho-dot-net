@page "/"
@inject ProdutoServices service
@inject IJSRuntime JS

<h1>InfoTech Store</h1>
<div class="container">
    <table class="table table-
bordered">

        <thead class="thead-dark">
            <tr>
                <th>Id</th>
                <th>Nome</th>
                <th>Preço</th>
                <th>Quantidade</th>
                <th>Descrição</th>

            </tr>
        </thead>
        <tbody> @if (Produtos.Any())
            {
                @foreach (var prod in Produtos)
                {
                    <tr>
                        <td>@prod.Id</td>
                        <td>@prod.Nome</td>
                        <td>@prod.Preço</td>
                        <td>@prod.Quant</td>
                        <td>@prod.Descr</td>
                        <td>
                            <button class="btn btn-danger" @onclick=" (()=> removeProduto(prod))">Deletar</button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="6">
                        <strong>Nenhum produto disponível</strong>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <NavLink href="/novoproduto">Criar novo
        produto</NavLink>
</div>

@code {

    List<Produto> Produtos = new List<Produto>();

    private async Task AtualizaProdutos()
    {
        Produtos = await
        service.RetornaProdutoAsync();
    }
    protected override async Task OnInitializedAsync()
    {
        await AtualizaProdutos();
    }

    private async Task removeProduto(Produto produto)
    {
        // confirmar a remoção do produto antes de deletar
        var confirm = await JS.InvokeAsync<bool>("confirm", $"Deseja remover o produto {produto.Nome}?");
        if (confirm)
        {
            await service.DeleteProductAsync(produto);
            await AtualizaProdutos();
        }
    }

}